#!/bin/bash\n\n# Studio-to-VS Code Setup Script\n# Creates a plug-and-play development environment for Toolhouse agents\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Default values\nAGENT_NAME=\"\"\nTEMPLATE=\"default\"\nPROJECT_DIR=\"\"\nUSE_PYTHON=\"false\"\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Function to show usage\nshow_usage() {\n    echo \"Studio-to-VS Code Setup Script\"\n    echo \"Creates a professional development environment for Toolhouse agents\"\n    echo \"\"\n    echo \"Usage: $0 <agent-name> [options]\"\n    echo \"\"\n    echo \"Arguments:\"\n    echo \"  agent-name          Name for your agent project (required)\"\n    echo \"\"\n    echo \"Options:\"\n    echo \"  --template TYPE     Use specific template (default: default)\"\n    echo \"  --python           Include Python development setup with UV\"\n    echo \"  --list-templates    Show available templates\"\n    echo \"  --help             Show this help message\"\n    echo \"\"\n    echo \"Examples:\"\n    echo \"  $0 my-support-agent\"\n    echo \"  $0 data-analyzer --template data-analyst --python\"\n    echo \"  $0 --list-templates\"\n}\n\n# Function to list available templates\nlist_templates() {\n    echo \"Available Templates:\"\n    echo \"\"\n    echo \"📞 customer-support  - Customer support agent with knowledge base\"\n    echo \"📊 data-analyst      - Data analysis agent for CSV/JSON processing (--python recommended)\"\n    echo \"🔍 code-reviewer     - Code review automation agent\"\n    echo \"✍️  content-writer    - Content generation and marketing agent\"\n    echo \"🔬 research-assistant - Web research and summarization agent (--python recommended)\"\n    echo \"⚙️  default          - Basic agent template\"\n    echo \"\"\n    echo \"💡 Use --python flag for agents that need data processing or advanced tool integration\"\n}\n\n# Function to check prerequisites\ncheck_prerequisites() {\n    print_status \"Checking prerequisites...\"\n    \n    # Check if Node.js is installed\n    if ! command -v node &> /dev/null; then\n        print_error \"Node.js is not installed. Please install Node.js first.\"\n        exit 1\n    fi\n    \n    # Check if npm is installed\n    if ! command -v npm &> /dev/null; then\n        print_error \"npm is not installed. Please install npm first.\"\n        exit 1\n    fi\n    \n    # Check if git is installed\n    if ! command -v git &> /dev/null; then\n        print_warning \"Git is not installed. Version control will not be available.\"\n    fi\n    \n    # Check if Toolhouse CLI is installed\n    if ! command -v th &> /dev/null; then\n        print_warning \"Toolhouse CLI not found. Installing...\"\n        npm install -g @toolhouseai/cli\n    fi\n    \n    # Check if UV is installed (if Python setup requested)\n    if [[ \"$USE_PYTHON\" == \"true\" ]]; then\n        if ! command -v uv &> /dev/null; then\n            print_warning \"UV not found. Installing UV (Python package manager)...\"\n            # Install UV using the official installer\n            if [[ \"$OSTYPE\" == \"msys\" || \"$OSTYPE\" == \"win32\" ]]; then\n                # Windows\n                powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n            else\n                # macOS/Linux\n                curl -LsSf https://astral.sh/uv/install.sh | sh\n                export PATH=\"$HOME/.cargo/bin:$PATH\"\n            fi\n        fi\n    fi\n    \n    print_success \"Prerequisites check completed\"\n}\n\n# Function to create project directory\ncreate_project_directory() {\n    PROJECT_DIR=\"${AGENT_NAME}-agent\"\n    \n    if [[ -d \"$PROJECT_DIR\" ]]; then\n        print_error \"Directory '$PROJECT_DIR' already exists!\"\n        read -p \"Do you want to overwrite it? (y/N): \" -n 1 -r\n        echo\n        if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n            print_status \"Setup cancelled\"\n            exit 0\n        fi\n        rm -rf \"$PROJECT_DIR\"\n    fi\n    \n    print_status \"Creating project directory: $PROJECT_DIR\"\n    mkdir -p \"$PROJECT_DIR\"\n    cd \"$PROJECT_DIR\"\n}\n\n# Function to create basic project structure\ncreate_project_structure() {\n    print_status \"Creating project structure...\"\n    \n    # Create directories\n    mkdir -p .vscode scripts tests docs\n    \n    if [[ \"$USE_PYTHON\" == \"true\" ]]; then\n        mkdir -p src tests\n    fi\n    \n    # Create agent.yaml with template\n    cat > agent.yaml << EOF\ntitle: \"${AGENT_NAME^} Agent\"\nprompt: |\n  You are a helpful AI assistant named ${AGENT_NAME^}.\n  \n  Your role is to assist users with their requests in a friendly and professional manner.\n  \n  When responding:\n  - Be clear and concise\n  - Ask clarifying questions if needed\n  - Provide step-by-step guidance when appropriate\n  - Be helpful and supportive\n  \n  If you need to use external tools or data, explain what you're doing.\n\nmodel: \"@openai/gpt-4o-mini\"\npublic: false\nvars:\n  environment: \"development\"\nEOF\n    \n    print_success \"Project structure created\"\n}\n\n# Function to create Python project files (if requested)\ncreate_python_project() {\n    if [[ \"$USE_PYTHON\" != \"true\" ]]; then\n        return\n    fi\n    \n    print_status \"Setting up Python project with UV...\"\n    \n    # Initialize UV project\n    uv init --name \"${AGENT_NAME//-/_}\" --no-readme\n    \n    # Create src directory structure\n    mkdir -p \"src/${AGENT_NAME//-/_}\"\n    \n    # Move main.py to src directory and rename\n    if [[ -f \"main.py\" ]]; then\n        mv main.py \"src/${AGENT_NAME//-/_}/__init__.py\"\n    fi\n    \n    # Create a proper main module\n    cat > \"src/${AGENT_NAME//-/_}/main.py\" << EOF\n\"\"\"${AGENT_NAME^} Agent - Main module.\"\"\"\n\nimport sys\nfrom pathlib import Path\n\n# Add the project root to Python path for Toolhouse agent integration\nproject_root = Path(__file__).parent.parent.parent\nsys.path.insert(0, str(project_root))\n\n\ndef main():\n    \"\"\"Main entry point for ${AGENT_NAME^} agent.\"\"\"\n    print(f\"Hello from ${AGENT_NAME^} agent!\")\n    print(\"This Python module can be used alongside your Toolhouse agent.\")\n    \n    # Example: Data processing, API calls, custom business logic\n    # Your custom Python code goes here\n    \n    return \"Agent completed successfully\"\n\n\nif __name__ == \"__main__\":\n    main()\nEOF\n    \n    # Update pyproject.toml for our use case\n    cat > pyproject.toml << EOF\n[project]\nname = \"${AGENT_NAME//-/_}\"\nversion = \"0.1.0\"\ndescription = \"${AGENT_NAME^} agent with custom Python integration\"\nreadme = \"README.md\"\nrequires-python = \">=3.9\"\ndependencies = [\n    # Add your Python dependencies here\n    # Example: \"requests>=2.31.0\",\n    # Example: \"pandas>=2.0.0\",\n]\n\n[project.optional-dependencies]\ndev = [\n    \"pytest>=7.0.0\",\n    \"black>=23.0.0\",\n    \"ruff>=0.1.0\",\n    \"mypy>=1.0.0\",\n]\ndata = [\n    \"pandas>=2.0.0\",\n    \"numpy>=1.24.0\",\n    \"matplotlib>=3.7.0\",\n    \"seaborn>=0.12.0\",\n]\nweb = [\n    \"requests>=2.31.0\",\n    \"httpx>=0.25.0\",\n    \"beautifulsoup4>=4.12.0\",\n]\nai = [\n    \"openai>=1.0.0\",\n    \"anthropic>=0.7.0\",\n    \"langchain>=0.1.0\",\n]\n\n[project.scripts]\n${AGENT_NAME//-/_} = \"${AGENT_NAME//-/_}.main:main\"\n\n[build-system]\nrequires = [\"hatchling\"]\nbuild-backend = \"hatchling.build\"\n\n[tool.uv]\ndev-dependencies = [\n    \"pytest>=7.0.0\",\n    \"black>=23.0.0\",\n    \"ruff>=0.1.0\",\n    \"mypy>=1.0.0\",\n]\n\n[tool.black]\nline-length = 88\ntarget-version = ['py39']\ninclude = '\\.pyi?$'\n\n[tool.ruff]\nselect = [\"E\", \"F\", \"I\", \"N\", \"W\"]\nline-length = 88\ntarget-version = \"py39\"\n\n[tool.mypy]\npython_version = \"3.9\"\nwarn_return_any = true\nwarn_unused_configs = true\ndisallow_untyped_defs = true\nEOF\n    \n    # Create Python-specific test\n    cat > \"tests/test_${AGENT_NAME//-/_}.py\" << EOF\n\"\"\"Tests for ${AGENT_NAME^} agent.\"\"\"\n\nimport pytest\nfrom ${AGENT_NAME//-/_}.main import main\n\n\ndef test_main():\n    \"\"\"Test the main function.\"\"\"\n    result = main()\n    assert result == \"Agent completed successfully\"\n\n\ndef test_agent_integration():\n    \"\"\"Test integration with Toolhouse agent.\"\"\"\n    # Add tests for your agent integration here\n    pass\nEOF\n    \n    print_success \"Python project setup completed with UV\"\n}\n\n# Function to create environment files\ncreate_environment_files() {\n    print_status \"Creating environment configuration...\"\n    \n    # Create .env.example\n    cat > .env.example << EOF\n# 🔑 Environment Variables for ${AGENT_NAME^} Agent\n# Copy this file to .env and fill in your actual API keys\n# Never commit .env to version control!\n\n# =============================================================================\n# TOOLHOUSE CONFIGURATION (Required)\n# =============================================================================\n\n# Your Toolhouse API key (required for CLI and SDK)\n# Get this from: https://toolhouse.ai/dashboard/api-keys\nTOOLHOUSE_API_KEY=your_toolhouse_api_key_here\n\n# =============================================================================\n# LLM PROVIDER API KEYS\n# =============================================================================\n\n# OpenAI API Key (most common)\n# Get this from: https://platform.openai.com/api-keys\n# Required for: @openai/gpt-4o, @openai/gpt-4o-mini, @openai/o1-preview, etc.\nOPENAI_API_KEY=sk-your_openai_key_here\n\n# Anthropic API Key\n# Get this from: https://console.anthropic.com/\n# Required for: @anthropic/claude-sonnet-4, @anthropic/claude-haiku-3-5, etc.\nANTHROPIC_API_KEY=sk-ant-your_anthropic_key_here\n\n# Groq API Key (High-speed inference)\n# Get this from: https://console.groq.com/keys\n# Required for: @groq/llama-3.3-70b-versatile, @groq/mixtral-8x7b-32768, etc.\nGROQ_API_KEY=gsk-your_groq_key_here\n\n# =============================================================================\n# AGENT CONFIGURATION\n# =============================================================================\n\n# Environment settings\nENVIRONMENT=development\nDEBUG=true\nLOG_LEVEL=info\n\n# Default model configuration\nDEFAULT_MODEL=@openai/gpt-4o-mini\nMAX_TOKENS=4000\nTEMPERATURE=0.7\n\n# Agent behavior\nMAX_RETRIES=3\nTIMEOUT_SECONDS=30\nEOF\n\nif [[ \"$USE_PYTHON\" == \"true\" ]]; then\n    cat >> .env.example << EOF\n\n# =============================================================================\n# PYTHON DEVELOPMENT\n# =============================================================================\n\n# Python environment\nPYTHON_ENV=development\nUV_CACHE_DIR=./.uv-cache\n\n# Common Python service APIs (uncomment as needed)\n# DATABASE_URL=postgresql://username:password@localhost:5432/database_name\n# REDIS_URL=redis://localhost:6379\n# SENDGRID_API_KEY=SG.your_sendgrid_key_here\nEOF\nfi\n\n    cat >> .env.example << EOF\n\n# =============================================================================\n# QUICK SETUP GUIDE\n# =============================================================================\n\n# 1. Copy this file: cp .env.example .env\n# 2. Get your Toolhouse API key: https://toolhouse.ai/dashboard/api-keys\n# 3. Get your LLM provider key: https://platform.openai.com/api-keys\n# 4. Fill in the keys above in your .env file\n# 5. Test your setup: ./scripts/test.sh\nEOF\n    \n    # Create .gitignore\n    cat > .gitignore << EOF\n# Environment variables\n.env\n.env.local\n.env.*.local\n\n# Dependencies\nnode_modules/\n__pycache__/\n*.pyc\n*.pyo\n*.pyd\n.Python\nbuild/\ndist/\n*.egg-info/\n.pytest_cache/\n\n# UV Python package manager\n.uv-cache/\n.venv/\nuv.lock\n*.uv\n\n# IDE\n.vscode/settings.json\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\n.DS_Store?\n._*\nThumbs.db\nehthumbs.db\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Toolhouse\n.toolhouse/\napi_keys.txt\n\n# Testing\ncoverage/\n.coverage\nhtmlcov/\n\n# Temporary files\n*.tmp\n*.temp\n.cache/\nEOF\n    \n    print_success \"Environment configuration created\"\n}\n\n# Parse command line arguments and continue with rest of script...\n# [Previous argument parsing code remains the same]\n\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        --template)\n            TEMPLATE=\"$2\"\n            shift 2\n            ;;\n        --python)\n            USE_PYTHON=\"true\"\n            shift\n            ;;\n        --list-templates)\n            list_templates\n            exit 0\n            ;;\n        --help|-h)\n            show_usage\n            exit 0\n            ;;\n        -*)\n            print_error \"Unknown option: $1\"\n            show_usage\n            exit 1\n            ;;\n        *)\n            if [[ -z \"$AGENT_NAME\" ]]; then\n                AGENT_NAME=\"$1\"\n            else\n                print_error \"Unexpected argument: $1\"\n                show_usage\n                exit 1\n            fi\n            shift\n            ;;\n    esac\ndone\n\n# Validate agent name\nif [[ -z \"$AGENT_NAME\" ]]; then\n    print_error \"Agent name is required\"\n    show_usage\n    exit 1\nfi\n\n# Validate agent name format\nif [[ ! \"$AGENT_NAME\" =~ ^[a-zA-Z][a-zA-Z0-9-]*$ ]]; then\n    print_error \"Agent name must start with a letter and contain only letters, numbers, and hyphens\"\n    exit 1\nfi\n\n# Main execution\nprint_status \"Setting up Toolhouse agent: $AGENT_NAME\"\nprint_status \"Template: $TEMPLATE\"\nif [[ \"$USE_PYTHON\" == \"true\" ]]; then\n    print_status \"Python setup: Enabled (using UV)\"\nelse\n    print_status \"Python setup: Disabled\"\nfi\necho \"\"\n\ncheck_prerequisites\ncreate_project_directory\ncreate_project_structure\ncreate_python_project\ncreate_environment_files\n\n# Continue with the rest of the original script for VS Code config, scripts, etc.\n# [Include all the other functions from the original script]"