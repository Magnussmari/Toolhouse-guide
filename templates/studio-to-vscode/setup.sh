#!/bin/bash\n\n# Studio-to-VS Code Setup Script\n# Creates a plug-and-play development environment for Toolhouse agents\n\nset -e\n\n# Colors for output\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nYELLOW='\\033[1;33m'\nBLUE='\\033[0;34m'\nNC='\\033[0m' # No Color\n\n# Default values\nAGENT_NAME=\"\"\nTEMPLATE=\"default\"\nPROJECT_DIR=\"\"\n\n# Function to print colored output\nprint_status() {\n    echo -e \"${BLUE}[INFO]${NC} $1\"\n}\n\nprint_success() {\n    echo -e \"${GREEN}[SUCCESS]${NC} $1\"\n}\n\nprint_warning() {\n    echo -e \"${YELLOW}[WARNING]${NC} $1\"\n}\n\nprint_error() {\n    echo -e \"${RED}[ERROR]${NC} $1\"\n}\n\n# Function to show usage\nshow_usage() {\n    echo \"Studio-to-VS Code Setup Script\"\n    echo \"Creates a professional development environment for Toolhouse agents\"\n    echo \"\"\n    echo \"Usage: $0 <agent-name> [options]\"\n    echo \"\"\n    echo \"Arguments:\"\n    echo \"  agent-name          Name for your agent project (required)\"\n    echo \"\"\n    echo \"Options:\"\n    echo \"  --template TYPE     Use specific template (default: default)\"\n    echo \"  --list-templates    Show available templates\"\n    echo \"  --help             Show this help message\"\n    echo \"\"\n    echo \"Examples:\"\n    echo \"  $0 my-support-agent\"\n    echo \"  $0 data-analyzer --template data-analyst\"\n    echo \"  $0 --list-templates\"\n}\n\n# Function to list available templates\nlist_templates() {\n    echo \"Available Templates:\"\n    echo \"\"\n    echo \"📞 customer-support  - Customer support agent with knowledge base\"\n    echo \"📊 data-analyst      - Data analysis agent for CSV/JSON processing\"\n    echo \"🔍 code-reviewer     - Code review automation agent\"\n    echo \"✍️  content-writer    - Content generation and marketing agent\"\n    echo \"🔬 research-assistant - Web research and summarization agent\"\n    echo \"⚙️  default          - Basic agent template\"\n}\n\n# Function to check prerequisites\ncheck_prerequisites() {\n    print_status \"Checking prerequisites...\"\n    \n    # Check if Node.js is installed\n    if ! command -v node &> /dev/null; then\n        print_error \"Node.js is not installed. Please install Node.js first.\"\n        exit 1\n    fi\n    \n    # Check if npm is installed\n    if ! command -v npm &> /dev/null; then\n        print_error \"npm is not installed. Please install npm first.\"\n        exit 1\n    fi\n    \n    # Check if git is installed\n    if ! command -v git &> /dev/null; then\n        print_warning \"Git is not installed. Version control will not be available.\"\n    fi\n    \n    # Check if Toolhouse CLI is installed\n    if ! command -v th &> /dev/null; then\n        print_warning \"Toolhouse CLI not found. Installing...\"\n        npm install -g @toolhouseai/cli\n    fi\n    \n    print_success \"Prerequisites check completed\"\n}\n\n# Function to create project directory\ncreate_project_directory() {\n    PROJECT_DIR=\"${AGENT_NAME}-agent\"\n    \n    if [[ -d \"$PROJECT_DIR\" ]]; then\n        print_error \"Directory '$PROJECT_DIR' already exists!\"\n        read -p \"Do you want to overwrite it? (y/N): \" -n 1 -r\n        echo\n        if [[ ! $REPLY =~ ^[Yy]$ ]]; then\n            print_status \"Setup cancelled\"\n            exit 0\n        fi\n        rm -rf \"$PROJECT_DIR\"\n    fi\n    \n    print_status \"Creating project directory: $PROJECT_DIR\"\n    mkdir -p \"$PROJECT_DIR\"\n    cd \"$PROJECT_DIR\"\n}\n\n# Function to create basic project structure\ncreate_project_structure() {\n    print_status \"Creating project structure...\"\n    \n    # Create directories\n    mkdir -p .vscode scripts tests docs\n    \n    # Create agent.yaml with template\n    cat > agent.yaml << EOF\ntitle: \"${AGENT_NAME^} Agent\"\nprompt: |\n  You are a helpful AI assistant named ${AGENT_NAME^}.\n  \n  Your role is to assist users with their requests in a friendly and professional manner.\n  \n  When responding:\n  - Be clear and concise\n  - Ask clarifying questions if needed\n  - Provide step-by-step guidance when appropriate\n  - Be helpful and supportive\n  \n  If you need to use external tools or data, explain what you're doing.\n\nmodel: \"@openai/gpt-4o-mini\"\npublic: false\nvars:\n  environment: \"development\"\nEOF\n    \n    # Create .env.example\n    cat > .env.example << EOF\n# Toolhouse Configuration\nTOOLHOUSE_API_KEY=your_toolhouse_api_key_here\n\n# Model Configuration\nOPENAI_API_KEY=your_openai_api_key_here\nANTHROPIC_API_KEY=your_anthropic_api_key_here\nGROQ_API_KEY=your_groq_api_key_here\n\n# Environment\nENVIRONMENT=development\nDEBUG=true\nEOF\n    \n    # Create .gitignore\n    cat > .gitignore << EOF\n# Environment variables\n.env\n.env.local\n.env.*.local\n\n# Dependencies\nnode_modules/\n__pycache__/\n*.pyc\n*.pyo\n*.pyd\n.Python\nbuild/\ndist/\n*.egg-info/\n\n# IDE\n.vscode/settings.json\n.idea/\n*.swp\n*.swo\n\n# OS\n.DS_Store\n.DS_Store?\n._*\nThumbs.db\nehthumbs.db\n\n# Logs\nlogs\n*.log\nnpm-debug.log*\nyarn-debug.log*\nyarn-error.log*\n\n# Toolhouse\n.toolhouse/\napi_keys.txt\n\n# Testing\ncoverage/\n.pytest_cache/\n.coverage\nhtmlcov/\n\n# Temporary files\n*.tmp\n*.temp\n.cache/\nEOF\n    \n    print_success \"Project structure created\"\n}\n\n# Function to create VS Code configuration\ncreate_vscode_config() {\n    print_status \"Creating VS Code configuration...\"\n    \n    # VS Code settings\n    cat > .vscode/settings.json << EOF\n{\n  \"yaml.schemas\": {\n    \"https://raw.githubusercontent.com/toolhouseai/toolhouse-schema/main/agent.schema.json\": \"agent.yaml\"\n  },\n  \"files.associations\": {\n    \"*.th\": \"yaml\"\n  },\n  \"editor.formatOnSave\": true,\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll\": true\n  },\n  \"terminal.integrated.cwd\": \"\\${workspaceFolder}\",\n  \"git.enableSmartCommit\": true,\n  \"git.confirmSync\": false\n}\nEOF\n    \n    # VS Code tasks\n    cat > .vscode/tasks.json << EOF\n{\n  \"version\": \"2.0.0\",\n  \"tasks\": [\n    {\n      \"label\": \"Test Agent\",\n      \"type\": \"shell\",\n      \"command\": \"th run agent.yaml\",\n      \"group\": \"test\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\",\n        \"showReuseMessage\": true,\n        \"clear\": false\n      },\n      \"problemMatcher\": []\n    },\n    {\n      \"label\": \"Deploy Agent\",\n      \"type\": \"shell\",\n      \"command\": \"th deploy agent.yaml\",\n      \"group\": \"build\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\"\n      },\n      \"problemMatcher\": []\n    },\n    {\n      \"label\": \"Validate Agent\",\n      \"type\": \"shell\",\n      \"command\": \"th validate agent.yaml\",\n      \"group\": \"test\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": false,\n        \"panel\": \"shared\"\n      },\n      \"problemMatcher\": []\n    },\n    {\n      \"label\": \"View Logs\",\n      \"type\": \"shell\",\n      \"command\": \"th logs \\${input:agentName} --follow\",\n      \"group\": \"test\",\n      \"presentation\": {\n        \"echo\": true,\n        \"reveal\": \"always\",\n        \"focus\": true,\n        \"panel\": \"new\"\n      },\n      \"problemMatcher\": []\n    }\n  ],\n  \"inputs\": [\n    {\n      \"id\": \"agentName\",\n      \"description\": \"Agent name for logs\",\n      \"default\": \"${AGENT_NAME}\",\n      \"type\": \"promptString\"\n    }\n  ]\n}\nEOF\n    \n    # VS Code launch configuration\n    cat > .vscode/launch.json << EOF\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Agent\",\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"program\": \"\\${workspaceFolder}/scripts/debug.js\",\n      \"console\": \"integratedTerminal\",\n      \"env\": {\n        \"DEBUG\": \"true\"\n      }\n    }\n  ]\n}\nEOF\n    \n    # Recommended extensions\n    cat > .vscode/extensions.json << EOF\n{\n  \"recommendations\": [\n    \"redhat.vscode-yaml\",\n    \"ms-vscode.vscode-json\",\n    \"eamodio.gitlens\",\n    \"usernamehw.errorlens\",\n    \"humao.rest-client\",\n    \"ms-vscode.vscode-typescript-next\",\n    \"bradlc.vscode-tailwindcss\",\n    \"github.copilot\",\n    \"github.copilot-chat\"\n  ]\n}\nEOF\n    \n    print_success \"VS Code configuration created\"\n}\n\n# Function to create development scripts\ncreate_scripts() {\n    print_status \"Creating development scripts...\"\n    \n    # Development script\n    cat > scripts/dev.sh << 'EOF'\n#!/bin/bash\n# Development mode with auto-reload\n\necho \"🚀 Starting development mode...\"\necho \"📁 Watching agent.yaml for changes\"\necho \"💡 Press Ctrl+C to stop\"\necho \"\"\n\n# Load environment variables\nif [[ -f .env ]]; then\n    source .env\nfi\n\n# Watch for changes and auto-test\nfswatch -o agent.yaml | while read f; do\n    echo \"🔄 Detected change in agent.yaml\"\n    echo \"🧪 Running tests...\"\n    th run agent.yaml\n    echo \"✅ Test completed\"\n    echo \"\"\ndone\nEOF\n    \n    # Test script\n    cat > scripts/test.sh << 'EOF'\n#!/bin/bash\n# Run agent tests\n\necho \"🧪 Running agent tests...\"\n\n# Load environment variables\nif [[ -f .env ]]; then\n    source .env\nfi\n\n# Validate configuration\necho \"📋 Validating agent configuration...\"\nth validate agent.yaml\n\nif [[ $? -eq 0 ]]; then\n    echo \"✅ Configuration valid\"\nelse\n    echo \"❌ Configuration invalid\"\n    exit 1\nfi\n\n# Run test scenarios\nif [[ -f tests/scenarios.txt ]]; then\n    echo \"🎯 Running test scenarios...\"\n    while IFS= read -r scenario; do\n        if [[ ! -z \"$scenario\" && ! \"$scenario\" =~ ^#.* ]]; then\n            echo \"Testing: $scenario\"\n            th run agent.yaml --input \"$scenario\"\n            echo \"\"\n        fi\n    done < tests/scenarios.txt\nelse\n    echo \"📝 No test scenarios found. Running basic test...\"\n    th run agent.yaml --input \"Hello, can you help me?\"\nfi\n\necho \"✅ All tests completed\"\nEOF\n    \n    # Deploy script\n    cat > scripts/deploy.sh << 'EOF'\n#!/bin/bash\n# Deploy agent to Toolhouse\n\necho \"🚀 Deploying agent to Toolhouse...\"\n\n# Load environment variables\nif [[ -f .env ]]; then\n    source .env\nfi\n\n# Check if we're authenticated\nif ! th whoami &> /dev/null; then\n    echo \"❌ Not authenticated with Toolhouse\"\n    echo \"Please run: th login\"\n    exit 1\nfi\n\n# Validate before deploy\necho \"📋 Validating configuration...\"\nth validate agent.yaml\n\nif [[ $? -ne 0 ]]; then\n    echo \"❌ Configuration validation failed\"\n    exit 1\nfi\n\n# Deploy\necho \"🚀 Deploying...\"\nth deploy agent.yaml\n\nif [[ $? -eq 0 ]]; then\n    echo \"✅ Deployment successful!\"\n    echo \"📡 Your agent is now live\"\nelse\n    echo \"❌ Deployment failed\"\n    exit 1\nfi\nEOF\n    \n    # Make scripts executable\n    chmod +x scripts/*.sh\n    \n    print_success \"Development scripts created\"\n}\n\n# Function to create test files\ncreate_test_files() {\n    print_status \"Creating test files...\"\n    \n    # Test scenarios\n    cat > tests/scenarios.txt << EOF\n# Test scenarios for ${AGENT_NAME^} Agent\n# Add your test questions here, one per line\n# Lines starting with # are comments\n\nHello, can you help me?\nWhat can you do?\nCan you explain your capabilities?\nHow do you work?\nEOF\n    \n    # Test runner\n    cat > tests/run-tests.sh << 'EOF'\n#!/bin/bash\n# Test runner script\n\ncd \"$(dirname \"$0\")/..\"\n./scripts/test.sh\nEOF\n    \n    chmod +x tests/run-tests.sh\n    \n    print_success \"Test files created\"\n}\n\n# Function to create documentation\ncreate_documentation() {\n    print_status \"Creating documentation...\"\n    \n    # Main README\n    cat > README.md << EOF\n# ${AGENT_NAME^} Agent\n\n> AI agent built with Toolhouse.ai\n\n## 🚀 Quick Start\n\n### Prerequisites\n- [Toolhouse CLI](https://docs.toolhouse.ai/cli) installed\n- Toolhouse API key configured\n\n### Development\n\n\\`\\`\\`bash\n# Test locally\n./scripts/test.sh\n\n# Start development mode (auto-reload)\n./scripts/dev.sh\n\n# Deploy to production\n./scripts/deploy.sh\n\\`\\`\\`\n\n### Environment Setup\n\n1. Copy environment template:\n   \\`\\`\\`bash\n   cp .env.example .env\n   \\`\\`\\`\n\n2. Add your API keys to \\`.env\\`\n\n3. Authenticate with Toolhouse:\n   \\`\\`\\`bash\n   th login\n   \\`\\`\\`\n\n## 📁 Project Structure\n\n\\`\\`\\`\n.\n├── agent.yaml           # Agent configuration\n├── .env.example         # Environment template\n├── scripts/             # Development scripts\n├── tests/               # Test scenarios\n├── docs/                # Documentation\n└── .vscode/             # VS Code configuration\n\\`\\`\\`\n\n## 🔧 Configuration\n\nEdit \\`agent.yaml\\` to customize your agent:\n\n- **prompt**: Define agent behavior and personality\n- **model**: Choose the LLM model\n- **bundles**: Add tool capabilities\n- **vars**: Configure variables\n\n## 🧪 Testing\n\nAdd test scenarios to \\`tests/scenarios.txt\\`:\n\n\\`\\`\\`\n# Example test questions\nWhat is your purpose?\nHow can you help me?\nCan you analyze data?\n\\`\\`\\`\n\n## 🚀 Deployment\n\nThe agent can be deployed as:\n\n- **Public API**: Accessible without authentication\n- **Private API**: Requires API key\n- **Scheduled runs**: Automated execution\n\n## 📚 Learn More\n\n- [Toolhouse Documentation](https://docs.toolhouse.ai/)\n- [Agent Development Guide](https://github.com/Magnussmari/ultimate-toolhouse-guide)\n- [CLI Reference](https://docs.toolhouse.ai/cli)\n\n---\n\n**Built with the [Studio-to-VS Code Template](https://github.com/Magnussmari/ultimate-toolhouse-guide/tree/main/templates/studio-to-vscode)**\nEOF\n    \n    # Development guide\n    cat > docs/development.md << EOF\n# Development Guide\n\n## Development Workflow\n\n1. **Edit agent.yaml**: Modify agent configuration\n2. **Test locally**: Run \\`./scripts/test.sh\\`\n3. **Validate**: Check configuration syntax\n4. **Deploy**: Push to production with \\`./scripts/deploy.sh\\`\n\n## VS Code Features\n\n### Built-in Tasks\n- **Ctrl+Shift+P** → \"Tasks: Run Task\"\n- Test Agent\n- Deploy Agent\n- Validate Agent\n- View Logs\n\n### Extensions\nRecommended extensions will be suggested when you open the project.\n\n## Best Practices\n\n- Test locally before deploying\n- Use environment variables for sensitive data\n- Version control all changes\n- Write descriptive commit messages\n- Add test scenarios for new features\nEOF\n    \n    print_success \"Documentation created\"\n}\n\n# Function to initialize package.json (optional)\ncreate_package_config() {\n    print_status \"Creating package configuration...\"\n    \n    cat > package.json << EOF\n{\n  \"name\": \"${AGENT_NAME}-agent\",\n  \"version\": \"1.0.0\",\n  \"description\": \"${AGENT_NAME^} agent built with Toolhouse.ai\",\n  \"scripts\": {\n    \"dev\": \"./scripts/dev.sh\",\n    \"test\": \"./scripts/test.sh\",\n    \"deploy\": \"./scripts/deploy.sh\",\n    \"validate\": \"th validate agent.yaml\",\n    \"logs\": \"th logs ${AGENT_NAME}\"\n  },\n  \"keywords\": [\"ai\", \"agent\", \"toolhouse\", \"automation\"],\n  \"author\": \"$(git config user.name || echo 'Your Name')\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"@toolhouseai/cli\": \"latest\"\n  }\n}\nEOF\n    \n    print_success \"Package configuration created\"\n}\n\n# Function to initialize git repository\ninit_git_repo() {\n    if command -v git &> /dev/null; then\n        print_status \"Initializing git repository...\"\n        \n        git init\n        git add .\n        git commit -m \"Initial commit: ${AGENT_NAME^} agent setup\"\n        \n        print_success \"Git repository initialized\"\n        print_status \"To connect to GitHub:\"\n        print_status \"  1. Create repository on GitHub\"\n        print_status \"  2. git remote add origin <repository-url>\"\n        print_status \"  3. git push -u origin main\"\n    else\n        print_warning \"Git not available - skipping repository initialization\"\n    fi\n}\n\n# Function to show completion message\nshow_completion() {\n    print_success \"🎉 Setup completed successfully!\"\n    echo \"\"\n    echo \"📁 Project created in: $PROJECT_DIR\"\n    echo \"\"\n    echo \"🚀 Next steps:\"\n    echo \"  1. cd $PROJECT_DIR\"\n    echo \"  2. cp .env.example .env\"\n    echo \"  3. Add your API keys to .env\"\n    echo \"  4. code .  # Open in VS Code\"\n    echo \"  5. Edit agent.yaml with your Agent Studio export\"\n    echo \"  6. ./scripts/test.sh  # Test your agent\"\n    echo \"\"\n    echo \"💡 Pro tip: Use 'th login' to authenticate with Toolhouse\"\n    echo \"📚 Documentation: ./docs/development.md\"\n}\n\n# Parse command line arguments\nwhile [[ $# -gt 0 ]]; do\n    case $1 in\n        --template)\n            TEMPLATE=\"$2\"\n            shift 2\n            ;;\n        --list-templates)\n            list_templates\n            exit 0\n            ;;\n        --help|-h)\n            show_usage\n            exit 0\n            ;;\n        -*)\n            print_error \"Unknown option: $1\"\n            show_usage\n            exit 1\n            ;;\n        *)\n            if [[ -z \"$AGENT_NAME\" ]]; then\n                AGENT_NAME=\"$1\"\n            else\n                print_error \"Unexpected argument: $1\"\n                show_usage\n                exit 1\n            fi\n            shift\n            ;;\n    esac\ndone\n\n# Validate agent name\nif [[ -z \"$AGENT_NAME\" ]]; then\n    print_error \"Agent name is required\"\n    show_usage\n    exit 1\nfi\n\n# Validate agent name format\nif [[ ! \"$AGENT_NAME\" =~ ^[a-zA-Z][a-zA-Z0-9-]*$ ]]; then\n    print_error \"Agent name must start with a letter and contain only letters, numbers, and hyphens\"\n    exit 1\nfi\n\n# Main execution\nprint_status \"Setting up Toolhouse agent: $AGENT_NAME\"\nprint_status \"Template: $TEMPLATE\"\necho \"\"\n\ncheck_prerequisites\ncreate_project_directory\ncreate_project_structure\ncreate_vscode_config\ncreate_scripts\ncreate_test_files\ncreate_documentation\ncreate_package_config\ninit_git_repo\n\nshow_completion"